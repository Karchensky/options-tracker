name: Options Tracker - Daily Analysis

on:
  schedule:
    - cron: '45 21 * * 1-5'  # Mon–Fri at 5:45 PM EST/EDT (after market close)
  workflow_dispatch:  # allows manual trigger
  push:
    branches: [ main ]
    paths:
      - 'core/**'
      - 'data/**'
      - 'analysis/**'
      - 'runner.py'

env:
  PYTHON_VERSION: '3.10'
  SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
  SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
  POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
  ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
  QUANDL_API_KEY: ${{ secrets.QUANDL_API_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -c "from config import config; print('Configuration loaded successfully')"
          python -c "from database.connection import db_manager; print('Database connection ready')"

  daily-analysis:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 120  # 2 hours timeout for full analysis
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate environment
        run: |
          python -c "
          from config import config
          if not config.validate():
              print('Configuration validation failed')
              exit(1)
          print('Configuration validated successfully')
          "

      - name: Test database connection
        run: |
          python -c "
          from database.connection import db_manager
          if not db_manager.test_connection():
              print('Database connection failed')
              exit(1)
          print('Database connection successful')
          "

      - name: Run options tracker
        run: python runner.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: options-tracker-logs
          path: |
            options_tracker.log
            *.log
          retention-days: 7

      - name: Check for errors
        if: failure()
        run: |
          echo "Options tracker failed. Check the logs above for details."
          if [ -f options_tracker.log ]; then
            echo "=== Last 50 lines of log ==="
            tail -50 options_tracker.log
          fi

  health-check:
    runs-on: ubuntu-latest
    needs: daily-analysis
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Health check
        run: |
          python -c "
          from database.connection import db_manager
          from sqlalchemy import text
          
          # Check if options data was collected today
          with db_manager.get_session() as session:
              result = session.execute(text('SELECT COUNT(*) FROM option_data WHERE snapshot_date = CURRENT_DATE'))
              count = result.scalar()
              print(f'Options records collected today: {count}')
              
              if count == 0:
                  print('WARNING: No options data collected today. This might indicate an issue.')
                  exit(1)
              else:
                  print('Health check passed - options data collected successfully')
                  
              # Also check for anomalies (but don't fail if none found)
              result = session.execute(text('SELECT COUNT(*) FROM option_anomalies WHERE snapshot_date = CURRENT_DATE'))
              anomaly_count = result.scalar()
              print(f'Anomalies detected today: {anomaly_count}')
          "

  notify-success:
    runs-on: ubuntu-latest
    needs: [daily-analysis, health-check]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "✅ Options tracker completed successfully"
          echo "Check your email for anomaly alerts"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [daily-analysis, health-check]
    if: failure()
    
    steps:
      - name: Failure notification
        run: |
          echo "❌ Options tracker failed"
          echo "Check the logs and GitHub Actions for details"
        
